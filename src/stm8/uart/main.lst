                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _printf
                                     13 	.globl _putchar
                                     14 ;--------------------------------------------------------
                                     15 ; ram data
                                     16 ;--------------------------------------------------------
                                     17 	.area DATA
                                     18 ;--------------------------------------------------------
                                     19 ; ram data
                                     20 ;--------------------------------------------------------
                                     21 	.area INITIALIZED
                                     22 ;--------------------------------------------------------
                                     23 ; Stack segment in internal ram 
                                     24 ;--------------------------------------------------------
                                     25 	.area	SSEG
      000000                         26 __start__stack:
      000000                         27 	.ds	1
                                     28 
                                     29 ;--------------------------------------------------------
                                     30 ; absolute external ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area DABS (ABS)
                                     33 ;--------------------------------------------------------
                                     34 ; interrupt vector 
                                     35 ;--------------------------------------------------------
                                     36 	.area HOME
      000000                         37 __interrupt_vect:
      000000 82v00u00u00             38 	int s_GSINIT ;reset
      000004 82 00 00 00             39 	int 0x0000 ;trap
      000008 82 00 00 00             40 	int 0x0000 ;int0
      00000C 82 00 00 00             41 	int 0x0000 ;int1
      000010 82 00 00 00             42 	int 0x0000 ;int2
      000014 82 00 00 00             43 	int 0x0000 ;int3
      000018 82 00 00 00             44 	int 0x0000 ;int4
      00001C 82 00 00 00             45 	int 0x0000 ;int5
      000020 82 00 00 00             46 	int 0x0000 ;int6
      000024 82 00 00 00             47 	int 0x0000 ;int7
      000028 82 00 00 00             48 	int 0x0000 ;int8
      00002C 82 00 00 00             49 	int 0x0000 ;int9
      000030 82 00 00 00             50 	int 0x0000 ;int10
      000034 82 00 00 00             51 	int 0x0000 ;int11
      000038 82 00 00 00             52 	int 0x0000 ;int12
      00003C 82 00 00 00             53 	int 0x0000 ;int13
      000040 82 00 00 00             54 	int 0x0000 ;int14
      000044 82 00 00 00             55 	int 0x0000 ;int15
      000048 82 00 00 00             56 	int 0x0000 ;int16
      00004C 82 00 00 00             57 	int 0x0000 ;int17
      000050 82 00 00 00             58 	int 0x0000 ;int18
      000054 82 00 00 00             59 	int 0x0000 ;int19
      000058 82 00 00 00             60 	int 0x0000 ;int20
      00005C 82 00 00 00             61 	int 0x0000 ;int21
      000060 82 00 00 00             62 	int 0x0000 ;int22
      000064 82 00 00 00             63 	int 0x0000 ;int23
      000068 82 00 00 00             64 	int 0x0000 ;int24
      00006C 82 00 00 00             65 	int 0x0000 ;int25
      000070 82 00 00 00             66 	int 0x0000 ;int26
      000074 82 00 00 00             67 	int 0x0000 ;int27
      000078 82 00 00 00             68 	int 0x0000 ;int28
      00007C 82 00 00 00             69 	int 0x0000 ;int29
                                     70 ;--------------------------------------------------------
                                     71 ; global & static initialisations
                                     72 ;--------------------------------------------------------
                                     73 	.area HOME
                                     74 	.area GSINIT
                                     75 	.area GSFINAL
                                     76 	.area GSINIT
      000000                         77 __sdcc_gs_init_startup:
      000000                         78 __sdcc_init_data:
                                     79 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]   80 	ldw x, #l_DATA
      000003 27 07            [ 1]   81 	jreq	00002$
      000005                         82 00001$:
      000005 72 4FuFFuFF      [ 1]   83 	clr (s_DATA - 1, x)
      000009 5A               [ 2]   84 	decw x
      00000A 26 F9            [ 1]   85 	jrne	00001$
      00000C                         86 00002$:
      00000C AEr00r00         [ 2]   87 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]   88 	jreq	00004$
      000011                         89 00003$:
      000011 D6uFFuFF         [ 1]   90 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]   91 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]   92 	decw	x
      000018 26 F7            [ 1]   93 	jrne	00003$
      00001A                         94 00004$:
                                     95 ; stm8_genXINIT() end
                                     96 	.area GSFINAL
      000000 CCr00r80         [ 2]   97 	jp	__sdcc_program_startup
                                     98 ;--------------------------------------------------------
                                     99 ; Home
                                    100 ;--------------------------------------------------------
                                    101 	.area HOME
                                    102 	.area HOME
      000080                        103 __sdcc_program_startup:
      000080 CCr00r1B         [ 2]  104 	jp	_main
                                    105 ;	return from main will return to caller
                                    106 ;--------------------------------------------------------
                                    107 ; code
                                    108 ;--------------------------------------------------------
                                    109 	.area CODE
                                    110 ;	main.c: 5: void putchar(char c)
                                    111 ;	-----------------------------------------
                                    112 ;	 function putchar
                                    113 ;	-----------------------------------------
      000000                        114 _putchar:
                                    115 ;	main.c: 7: while (!(UART1_SR & UART_SR_TXE)) {};
      000000                        116 00101$:
      000000 AE 52 30         [ 2]  117 	ldw	x, #0x5230
      000003 F6               [ 1]  118 	ld	a, (x)
      000004 4D               [ 1]  119 	tnz	a
      000005 2A F9            [ 1]  120 	jrpl	00101$
                                    121 ;	main.c: 9: UART1_DR = c;
      000007 AE 52 31         [ 2]  122 	ldw	x, #0x5231
      00000A 7B 03            [ 1]  123 	ld	a, (0x03, sp)
      00000C F7               [ 1]  124 	ld	(x), a
                                    125 ;	main.c: 11: if (c == '\n')
      00000D 7B 03            [ 1]  126 	ld	a, (0x03, sp)
      00000F A1 0A            [ 1]  127 	cp	a, #0x0a
      000011 27 01            [ 1]  128 	jreq	00123$
      000013 81               [ 4]  129 	ret
      000014                        130 00123$:
                                    131 ;	main.c: 12: putchar('\r');
      000014 4B 0D            [ 1]  132 	push	#0x0d
      000016 CDr00r00         [ 4]  133 	call	_putchar
      000019 84               [ 1]  134 	pop	a
      00001A 81               [ 4]  135 	ret
                                    136 ;	main.c: 15: void main(void)
                                    137 ;	-----------------------------------------
                                    138 ;	 function main
                                    139 ;	-----------------------------------------
      00001B                        140 _main:
      00001B 52 04            [ 2]  141 	sub	sp, #4
                                    142 ;	main.c: 17: CLK_CKDIVR = 0;
      00001D 35 00 50 C6      [ 1]  143 	mov	0x50c6+0, #0x00
                                    144 ;	main.c: 18: CLK_PCKENR1 = 0xFF; // Enable peripherals
      000021 35 FF 50 C7      [ 1]  145 	mov	0x50c7+0, #0xff
                                    146 ;	main.c: 20: UART1_CR2 = UART_CR2_TEN; // Allow TX and RX
      000025 35 08 52 35      [ 1]  147 	mov	0x5235+0, #0x08
                                    148 ;	main.c: 21: UART1_CR3 &= ~(UART_CR3_STOP1 | UART_CR3_STOP2); // 1 stop bit
      000029 AE 52 36         [ 2]  149 	ldw	x, #0x5236
      00002C F6               [ 1]  150 	ld	a, (x)
      00002D A4 CF            [ 1]  151 	and	a, #0xcf
      00002F F7               [ 1]  152 	ld	(x), a
                                    153 ;	main.c: 22: UART1_BRR2 = 0x03;
      000030 35 03 52 33      [ 1]  154 	mov	0x5233+0, #0x03
                                    155 ;	main.c: 23: UART1_BRR1 = 0x68; // 9600 baud
      000034 35 68 52 32      [ 1]  156 	mov	0x5232+0, #0x68
      000038                        157 00110$:
                                    158 ;	main.c: 26: printf("Hello World!\n");
      000038 AEr00r5F         [ 2]  159 	ldw	x, #___str_0+0
      00003B 89               [ 2]  160 	pushw	x
      00003C CDr00r00         [ 4]  161 	call	_printf
      00003F 5B 02            [ 2]  162 	addw	sp, #2
                                    163 ;	../stm8.h: 234: while (ms--) {
      000041 90 AE 01 F4      [ 2]  164 	ldw	y, #0x01f4
      000045                        165 00102$:
      000045 17 03            [ 2]  166 	ldw	(0x03, sp), y
      000047 90 5A            [ 2]  167 	decw	y
      000049 1E 03            [ 2]  168 	ldw	x, (0x03, sp)
      00004B 27 EB            [ 1]  169 	jreq	00110$
                                    170 ;	main.c: 235: ERROR: no line number 235 in file main.c
      00004D AE 06 33         [ 2]  171 	ldw	x, #0x0633
      000050 1F 01            [ 2]  172 	ldw	(0x01, sp), x
      000052                        173 00109$:
      000052 1E 01            [ 2]  174 	ldw	x, (0x01, sp)
      000054 5A               [ 2]  175 	decw	x
      000055 1F 01            [ 2]  176 	ldw	(0x01, sp), x
      000057 5D               [ 2]  177 	tnzw	x
      000058 26 F8            [ 1]  178 	jrne	00109$
      00005A 20 E9            [ 2]  179 	jra	00102$
                                    180 ;	main.c: 27: delay_ms(500);
      00005C 5B 04            [ 2]  181 	addw	sp, #4
      00005E 81               [ 4]  182 	ret
                                    183 	.area CODE
      00005F                        184 ___str_0:
      00005F 48 65 6C 6C 6F 20 57   185 	.ascii "Hello World!"
             6F 72 6C 64 21
      00006B 0A                     186 	.db 0x0a
      00006C 00                     187 	.db 0x00
                                    188 	.area INITIALIZER
                                    189 	.area CABS (ABS)
